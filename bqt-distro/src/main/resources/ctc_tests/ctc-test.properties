#  	The ctc-test.properties is used by the bulk query testing .
#	This file provides properties to the process in 2 ways:
#	1.	It acts as a template when property substitution is involved.   Meaning the property value will be derived
#		at execution time.  
#	2.	The other properties will be static.


##--- The following properties are expected to be passed in as system properties
#	- ${queryset.artifacts.dir} this is the root path for which the below properties (i.e., queryset.dir} are appended


##--- The following properties are expected to come from the scenario file
#	- ${queryset.dir} a path appended to ${queryset.artifacts.dir}, which provides the location for the queryset of files to use (because each scenario could be different, bqt, sp, etc)
#	- ${test.queries.dir} a path appended to ${queryset.artifacts.dir}, which provides the location which directory in the ${queryset.dir} to find the queries to run.
#	- ${expected.results.dir} a path appended to ${queryset.artifacts.dir}, which provides the location which directory in the ${queryset.dir} to find the expected results. 
#		 This may be different when 
#			multiple scenarios use the same queries but have different expected results   
#	- ${vdb.name} indicates the vdb to connect to


# the location where a specific query set can be found
queryfiles.loc=${queryset.artifacts.dir}/${queryset.dir}/${test.queries.dir}

# the location where the specific expected result files can be found
results.loc=${queryset.artifacts.dir}/${queryset.dir}/${expected.results.dir}

# the location where newly generated expected results will be created (resultmode = generate)
generatedir=${output.dir}/${queryset.dir}/generate
# the comparison reports for each query set
outputdir=${output.dir}/${queryset.dir}/output

# write the summary files out to this location to make it easier to assimilate the files
summarydir=${output.dir}


#  transaction types
#  See the TransactionFactory for the list of types
transaction-option=off
#transaction-option=local

#  resultmode options:
#	-	compare :  compare actual results to expected results
#	-	generate : create new expected results
#	-	none :  run the queries, only report when errors occur
#	-	sql : create sql queries based on database metadata
resultmode=${result.mode}

process-batch = 20
connector-batch = 20

# this is how to submit queries to Teiid
# default is true
execute.in.batch=false

##########################################
# properties for Teiid connection
##########################################
connection-type=driver
#connection-type=datasource

#driver=org.teiid.jdbc.TeiidDataSource

### driver and url for connecting in server mode
driver=org.teiid.jdbc.TeiidDriver

# this has the backwards compatibility option enabled by setting it to false;
# remove this property if use want JDBC4 semantics
URL=jdbc:teiid:${vdb.name}@mm://${server.host.name}:31000;user=${username};password=${password};useJDBC4ColumnNameAndLabelSemantics=false

### driver and url for running in embedded mode
#driver=com.metamatrix.jdbc.EmbeddedDataSource
#URL=jdbc:metamatrix:${vdb.name}@target/classes/ctc_tests/deploy.properties;version=1;user=admin;password=teiid
User=${username}
Password=${password}

### dont define Database, it will be set based on the scenario vdb
DatabaseName=${vdb.name}

#PortNumber=0
#application-name=bqt-test

# jboss
# mm.ds-jndiname=java:mmXA
# usertxn-jndiname=UserTransaction

# weblogic
mm.ds-jndiname=mmXA
usertxn-jndiname=java:comp/UserTransaction