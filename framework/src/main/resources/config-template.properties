# This is a template for which all the properties will be mapped to and
# used by the testing process.
#
#############
#  Order Of Property Loading
#############
# The ConfigPropertyLoader will first load this template.
# Then it will look for the "config" property that indicates a set of properties to use.
# If the "config" property is not set, it then will load the "default-config.properties".
# The TestClient, when starting the test, will load the scenario.file properties.
#
# The ${..} variables will be resolved and all properties then are part of execution set.
#
#############
#	Properties that should be defined in the scenario properties file
#	-	queryset.dir
#	-	test.queries.dir
#	-	expected.results.dir

#  	By defining these in a separate scenario file, it will enable you to build different
#	testing scenarios (queries and expected results) without having to hard code the
#	full path. 

#	Set the queryset.artifacts.dir will control the location your query artifacts are located.
#	This will allow the artifacts be down loaded from a SCM into any location and then that
#	location can be set at execution time, without having to change the scenario files.
#
#	For security testing, the username/password properties can be placed into the scenario file
#	so that only specific test are run for specific combination testing.
#	
############
#	Properties that are meant to be set at execution time:
#	-	result.mode
#	-	scenario.file
#	-	output.dir  (where do you want output to be written)


#  resultmode options:
#	-	compare :  compare actual results to expected results
#	-	generate : create new expected results
#	-	none :  run the queries, only report when errors occur
#	-	sql : create sql queries based on database metadata
bqt.result.mode=${result.mode}

bqt.queryset.dirname=${queryset.dirname}

#############################
# RESULT_MODE=COMPARE or NONE
#############################

# the location where a specific query set can be found
bqt.queryfiles.loc=${queryset.artifacts.dir}/${queryset.dirname}/${test.queries.dirname}

# the location where the specific expected result files can be found
bqt.expectedresults.loc=${queryset.artifacts.dir}/${queryset.dirname}/${expected.results.dirname}


# the scenario file to use
bqt.scenario.file=${scenario.file}

#####################
#  Output Locations
####################
# the root directory, if used in this manner, can contain all the different scenario execution directories
# and the reports will provide a summary for all scenarios that were run under this root directory.
bqt.output.dir=${output.dir}

# this is the directory were all output for a specific scenario will be put, regardless of result mode
bqt.testrun.dir=${bqt.output.dir}/${scenario.name}/${queryset.dirname}

#############################
# RESULT_MODE=COMPARE
#############################

# the location where newly compare results will be written (resultmode = compare)
bqt.compare.dir=${bqt.testrun.dir}/${result.mode}

#############################
# RESULT_MODE=GENERATE
#############################

# the location where newly generated expected results will be created (resultmode = generate)
bqt.generate.dir=${bqt.testrun.dir}/${result.mode}/${expected.results.dirname}

#############################
# RESULT_MODE=SQL
#############################

# the location where newly created queries are created (resultmode = sql)
bqt.sql.dir=${bqt.testrun.dir}/${result.mode}/${test.queries.dirname}


#############################
# The ERROR location, will an error file for each query that failed, even when RESULT_MODE=GENERATE is run.
# This way you know that in your expected results, there are expected failures.
#############################
bqt.errors.dir=${bqt.testrun.dir}/errors_for_${result.mode}

#  transaction types
#  See the TransactionFactory for the list of types
bqt.transaction.option=${transaction.option}



##########################################
# properties for connection
##########################################
conn.type=${connection.type}

### driver and url for connecting in server mode
conn.driver=${jdbc.driver}

conn.url=${url}

conn.user=${username}
conn.password=${password}
